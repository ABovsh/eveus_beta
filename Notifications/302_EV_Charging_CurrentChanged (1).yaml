alias: 302_EV_Charging_CurrentChanged
description: |
  # EV Charging Monitor - Current Changes
  Version: 1.6.1
  Last Updated: 2025-03-15

  ## Functions:
  1. Monitors charging current adjustments
  2. Validates charging parameters
  3. Tracks real-time charging estimates
  4. Provides updated charging metrics

  ## Dependencies:
  - sensor.eveus_ev_charger_state
  - sensor.eveus_ev_charger_soc_percent
  - sensor.eveus_ev_charger_power 
  - number.eveus_ev_charger_charging_current
  - input_number.ev_target_soc
  - input_number.ev_battery_capacity
  - input_number.ev_soc_correction
triggers:
  - entity_id: number.eveus_ev_charger_charging_current
    id: current_trigger
    trigger: state
conditions:
  - condition: state
    entity_id: sensor.eveus_ev_charger_state
    state: Charging
  - condition: template
    value_template: >
      {% set current =
      states('number.eveus_ev_charger_charging_current')|float(0) %} {% set prev
      = trigger.from_state.state|float(0) if trigger.from_state else 0 %} {{
      current != prev and 6 <= current <= 32 and prev > 0 }}
  - condition: template
    value_template: |
      {% set entities = [
        'sensor.eveus_ev_charger_soc_percent',
        'sensor.eveus_ev_charger_power',
        'input_number.ev_target_soc',
        'input_number.ev_battery_capacity'
      ] %} {% set available = true %} {% for entity in entities %}
        {% if states(entity) in ['unknown', 'unavailable', 'none'] %}
          {% set available = false %}
          {% break %}
        {% endif %}
      {% endfor %} {{ available }}
actions:
  - data:
      title: "*EV* 🔌 *Current Changed* | {{ current_amps|round(0)|int }}A"
      message: |
        ⏰ ETA: {{ time_data.eta }} (in {{ time_data.duration }})
        🔋 SoC: {{ soc_data.current|round(0) }}% → {{ soc_data.target|round(0)
        }}% (+{{ soc_data.increase|round(0) }}%)
        ⚡ Energy: {{ soc_data.current_kwh }}kWh → {{ soc_data.target_kwh }}kWh
        (+{{ soc_data.added_kwh }})
    action: notify.notify
variables:
  current_amps: "{{ states('number.eveus_ev_charger_charging_current')|float(0) }}"
  soc_data:
    current: "{{ states('sensor.eveus_ev_charger_soc_percent')|float(0) }}"
    target: "{{ states('input_number.ev_target_soc')|float(0) }}"
    increase: >
      {{ states('input_number.ev_target_soc')|float(0) -
      states('sensor.eveus_ev_charger_soc_percent')|float(0) }}
    capacity: "{{ states('input_number.ev_battery_capacity')|float(0) }}"
    current_kwh: >
      {{ (states('input_number.ev_battery_capacity')|float(0) *
      states('sensor.eveus_ev_charger_soc_percent')|float(0) / 100)|int }}
    target_kwh: >
      {{ (states('input_number.ev_battery_capacity')|float(0) *
      states('input_number.ev_target_soc')|float(0) / 100)|int }}
    added_kwh: >
      {{ ((states('input_number.ev_battery_capacity')|float(0) *
      states('input_number.ev_target_soc')|float(0) / 100) - 
          (states('input_number.ev_battery_capacity')|float(0) * states('sensor.eveus_ev_charger_soc_percent')|float(0) / 100))|int }}
  time_data:
    eta: >
      {% set correction = states('input_number.ev_soc_correction')|float(0) %}
      {% set remaining_kwh = ((states('input_number.ev_target_soc')|float(0) -
                             states('sensor.eveus_ev_charger_soc_percent')|float(0)) * 
                             states('input_number.ev_battery_capacity')|float(0) / 100) %}
      {% set adjusted_power = 230 *
                             states('number.eveus_ev_charger_charging_current')|float(0) * 0.9 / 1000 %}
      {% set power_kw = adjusted_power * (1 - correction / 100) %} {% set
      total_minutes = (remaining_kwh / power_kw * 60)|round(0) if power_kw > 0
      else 0 %} {% set completion = now() + timedelta(minutes=total_minutes) %}
      {{ completion.strftime('%H:%M %d.%m.%Y') }}
    duration: >
      {% set correction = states('input_number.ev_soc_correction')|float(0) %}
      {% set remaining_kwh = ((states('input_number.ev_target_soc')|float(0) -
                             states('sensor.eveus_ev_charger_soc_percent')|float(0)) * 
                             states('input_number.ev_battery_capacity')|float(0) / 100) %}
      {% set adjusted_power = 230 *
                             states('number.eveus_ev_charger_charging_current')|float(0) * 0.9 / 1000 %}
      {% set power_kw = adjusted_power * (1 - correction / 100) %} {% set
      total_minutes = (remaining_kwh / power_kw * 60)|round(0) if power_kw > 0
      else 0 %} {% set hours = (total_minutes / 60)|int %} {% set mins =
      (total_minutes % 60)|int %} {{ hours|string + 'h ' + ('%02d'|format(mins))
      + 'm' }}
mode: restart
max_exceeded: silent
