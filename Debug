{# Debug template for Eveus SOC Sensors - Version 2.0 #}
{% set debug_data = {
    'inputs': {
        'initial_soc': states('input_number.ev_initial_soc'),
        'battery_capacity': states('input_number.ev_battery_capacity'),
        'soc_correction': states('input_number.ev_soc_correction'),
        'target_soc': states('input_number.ev_target_soc')
    },
    'sensors': {
        'soc_energy': states('sensor.eveus_ev_charger_soc_energy'),
        'soc_percent': states('sensor.eveus_ev_charger_soc_percent'),
        'time_to_target': states('sensor.eveus_ev_charger_time_to_target_soc'),
        'input_status': states('sensor.eveus_ev_charger_input_entities_status'),
        'voltage': states('sensor.eveus_ev_charger_voltage'),
        'current': states('sensor.eveus_ev_charger_current'),
        'power': states('sensor.eveus_ev_charger_power'),
        'current_set': states('sensor.eveus_ev_charger_current_set'),
        'session_time': states('sensor.eveus_ev_charger_session_time'),
        'session_energy': states('sensor.eveus_ev_charger_session_energy'),
        'total_energy': states('sensor.eveus_ev_charger_total_energy'),
        'counter_a_energy': states('sensor.eveus_ev_charger_counter_a_energy'),
        'counter_a_cost': states('sensor.eveus_ev_charger_counter_a_cost'),
        'counter_b_energy': states('sensor.eveus_ev_charger_counter_b_energy'),
        'counter_b_cost': states('sensor.eveus_ev_charger_counter_b_cost'),
        'state': states('sensor.eveus_ev_charger_state'),
        'substate': states('sensor.eveus_ev_charger_substate'),
        'ground': states('sensor.eveus_ev_charger_ground'),
        'box_temp': states('sensor.eveus_ev_charger_box_temperature'),
        'plug_temp': states('sensor.eveus_ev_charger_plug_temperature'),
        'battery_voltage': states('sensor.eveus_ev_charger_battery_voltage'),
        'system_time': states('sensor.eveus_ev_charger_system_time'),
        'connection_quality': states('sensor.eveus_ev_charger_connection_quality')
    }
} %}

{# Calculation Preparation #}
{% set initial_soc = debug_data.inputs.initial_soc|float(0) %}
{% set battery_capacity = debug_data.inputs.battery_capacity|float(0) %}
{% set soc_correction = debug_data.inputs.soc_correction|float(0) %}
{% set target_soc = debug_data.inputs.target_soc|float(0) %}
{% set energy_charged = debug_data.sensors.counter_a_energy|float(0) %}
{% set power = debug_data.sensors.power|float(0) %}
{% set current = debug_data.sensors.current|float(0) %}
{% set voltage = debug_data.sensors.voltage|float(0) %}

{# Validity Checks #}
{% set inputs_valid = (
    initial_soc > 0 and 
    initial_soc <= 100 and
    battery_capacity > 0 and
    battery_capacity <= 160 and
    soc_correction >= 0 and
    soc_correction <= 15 and
    target_soc > 0 and
    target_soc <= 100
) %}

{% set sensors_valid = (
    debug_data.sensors.counter_a_energy != 'unknown' and 
    debug_data.sensors.counter_a_energy != 'unavailable'
) %}

{% set input_valid = inputs_valid and sensors_valid %}

{# State Analysis #}
{% set is_charging = debug_data.sensors.state == 'Charging' or debug_data.sensors.power|float(0) > 100 %}
{% set is_connected = debug_data.sensors.state != 'Disconnected' and debug_data.sensors.state != 'unknown' and debug_data.sensors.state != 'unavailable' %}
{% set is_enabled = debug_data.sensors.current_set|float(0) > 0 %}

{# Calculations #}
{% if input_valid %}
  {% set initial_kwh = (initial_soc / 100) * battery_capacity %}
  {% set efficiency = (1 - soc_correction / 100) %}
  {% set charged_kwh = energy_charged * efficiency %}
  {% set total_kwh = initial_kwh + charged_kwh %}
  {% set soc_energy = total_kwh|round(2) %}
  {% set soc_percent = ((total_kwh / battery_capacity) * 100)|round(1) %}
  
  {% if soc_percent > 100 %}
    {% set soc_percent = 100 %}
  {% endif %}
  
  {% if power > 100 and soc_percent < target_soc %}
    {% set remaining_kwh = ((target_soc - soc_percent) / 100) * battery_capacity %}
    {% set hours_remaining = (remaining_kwh / (power / 1000))|round(2) %}
    {% set hours = hours_remaining|int %}
    {% set minutes = ((hours_remaining - hours) * 60)|int %}
    {% set time_to_target = hours ~ 'h ' ~ minutes ~ 'm' %}
    {% set charging_rate = power / 1000 %}
    {% set session_efficiency = efficiency * 100 %}
  {% else %}
    {% set time_to_target = 'N/A' %}
    {% set charging_rate = 0 %}
    {% set session_efficiency = 0 %}
  {% endif %}
{% else %}
  {% set soc_energy = 'Cannot calculate - missing or invalid inputs' %}
  {% set soc_percent = 'Cannot calculate - missing or invalid inputs' %}
  {% set time_to_target = 'Cannot calculate - missing or invalid inputs' %}
  {% set charging_rate = 0 %}
  {% set session_efficiency = 0 %}
{% endif %}

EVEUS SOC SENSOR DEBUG REPORT

SYSTEM STATUS SUMMARY
- Charger State: {{ debug_data.sensors.state }}
- Charging Active: {{ is_charging }}
- Charging Enabled: {{ is_enabled }}
- Connected: {{ is_connected }}
- Current Power: {{ debug_data.sensors.power }} W
- Current Set: {{ debug_data.sensors.current_set }} A
- Session Energy: {{ debug_data.sensors.session_energy }} kWh
- Connection Quality: {{ debug_data.sensors.connection_quality }}%

REQUIRED INPUT ENTITIES
{% for name, value in debug_data.inputs.items() %}
- input_number.ev_{{ name }}: {{ value }}
{% endfor %}

INPUT VALIDITY
- Inputs Valid: {{ inputs_valid }}
- Sensors Valid: {{ sensors_valid }}
- Overall Validity: {{ input_valid }}

EV CHARGING STATUS
- SOC Energy: {{ debug_data.sensors.soc_energy }} kWh
- SOC Percent: {{ debug_data.sensors.soc_percent }}%
- Time to Target SOC: {{ debug_data.sensors.time_to_target }}
- Input Status: {{ debug_data.sensors.input_status }}

BASIC SENSOR VALUES
- Voltage: {{ debug_data.sensors.voltage }} V
- Current: {{ debug_data.sensors.current }} A
- Power: {{ debug_data.sensors.power }} W
- Session Energy: {{ debug_data.sensors.session_energy }} kWh
- Total Energy: {{ debug_data.sensors.total_energy }} kWh
- Session Time: {{ debug_data.sensors.session_time }}

CHARGER STATE DETAILS
- State: {{ debug_data.sensors.state }}
- Substate: {{ debug_data.sensors.substate }}
- Current Set: {{ debug_data.sensors.current_set }} A
- Ground: {{ debug_data.sensors.ground }}
- System Time: {{ debug_data.sensors.system_time }}
- Battery Voltage: {{ debug_data.sensors.battery_voltage }} V

TEMPERATURE DATA
- Box Temperature: {{ debug_data.sensors.box_temp }} °C
- Plug Temperature: {{ debug_data.sensors.plug_temp }} °C
- Temperature Delta: {{ (debug_data.sensors.box_temp|float(0) - debug_data.sensors.plug_temp|float(0))|abs|round(1) }} °C

COUNTER VALUES
- Counter A Energy: {{ debug_data.sensors.counter_a_energy }} kWh
- Counter B Energy: {{ debug_data.sensors.counter_b_energy }} kWh
- Counter A Cost: {{ debug_data.sensors.counter_a_cost }} ₴
- Counter B Cost: {{ debug_data.sensors.counter_b_cost }} ₴

ENTITY EXISTENCE CHECK
{% set check_entities = [
  'input_number.ev_initial_soc',
  'input_number.ev_battery_capacity',
  'input_number.ev_soc_correction',
  'input_number.ev_target_soc',
  'sensor.eveus_ev_charger_soc_energy',
  'sensor.eveus_ev_charger_soc_percent',
  'sensor.eveus_ev_charger_time_to_target_soc',
  'sensor.eveus_ev_charger_counter_a_energy',
  'sensor.eveus_ev_charger_power',
  'sensor.eveus_ev_charger_current',
  'sensor.eveus_ev_charger_voltage',
  'sensor.eveus_ev_charger_state'
] %}
{% for entity_id in check_entities %}
- {{ entity_id }}: {{ states(entity_id) != 'unknown' and states(entity_id) != 'unavailable' }}
{% endfor %}

EXPECTED CALCULATED VALUES
- Expected SOC Energy: {{ soc_energy }} kWh
- Expected SOC Percent: {{ soc_percent }}%
- Expected Time to Target: {{ time_to_target }}
{% if input_valid and is_charging %}
- Charging Rate: {{ (power / 1000)|round(2) }} kW
- Session Efficiency: {{ (efficiency * 100)|round(1) }}%
{% endif %}

CALCULATION DETAILS
{% if input_valid %}
- Initial SOC: {{ initial_soc }}%
- Battery Capacity: {{ battery_capacity }} kWh
- Efficiency Correction: {{ soc_correction }}%
- Energy Charged: {{ energy_charged }} kWh
- Initial Energy: {{ initial_kwh }} kWh
- Efficiency Factor: {{ efficiency|round(3) }}
- Charged Energy (with efficiency): {{ charged_kwh|round(2) }} kWh
- Total Energy: {{ total_kwh|round(2) }} kWh
{% if soc_percent < target_soc and power > 100 %}
- Target SOC: {{ target_soc }}%
- Current SOC: {{ soc_percent }}%
- Remaining Energy: {{ ((target_soc - soc_percent) / 100) * battery_capacity|round(2) }} kWh
- Current Power: {{ power }} W
- Estimated Hours Remaining: {{ (((target_soc - soc_percent) / 100) * battery_capacity / (power / 1000))|round(2) }}
{% endif %}
{% else %}
Cannot perform calculations due to missing or invalid inputs.

Troubleshooting:
1. Check if all required input_number entities exist
2. Verify input values are within expected ranges:
   - initial_soc: 1-100%
   - battery_capacity: 10-160 kWh
   - soc_correction: 0-15%
   - target_soc: 1-100%
3. Verify sensor readings for Counter A Energy are available
4. Check if power readings are present when calculating time to target
5. Verify charger is connected and communicating properly
{% endif %}

DIAGNOSTIC INFORMATION
- SOC Calculation Method: Custom with {{ soc_correction }}% efficiency loss
- Entity Prefix Pattern: sensor.eveus_ev_charger_*
- Configuration Valid: {{ input_valid }}

DEBUG TIMESTAMP
- Generated: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}
